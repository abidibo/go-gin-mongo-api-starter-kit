basePath: /api
definitions:
  auth.LoginCredentials:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  auth.LoginSuccessResponse:
    properties:
      token:
        type: string
    type: object
  auth.UserData:
    properties:
      created:
        type: integer
      email:
        type: string
      id:
        type: string
      role:
        type: string
    type: object
  auth.UserValidatorData:
    properties:
      email:
        type: string
      password:
        type: string
      role:
        type: string
    required:
    - email
    - password
    - role
    type: object
  domains.DomainData:
    properties:
      created:
        type: integer
      id:
        type: string
      ip:
        type: string
      loginInfo:
        type: string
      mx:
        type: boolean
      name:
        type: string
      notes:
        type: string
      owner:
        type: string
      package:
        type: string
      registrant:
        type: string
      serverName:
        type: string
      updated:
        type: integer
    type: object
  domains.DomainValidatorData:
    properties:
      ip:
        type: string
      loginInfo:
        type: string
      mx:
        type: boolean
      name:
        type: string
      notes:
        type: string
      owner:
        type: string
      package:
        type: string
      registrant:
        type: string
      serverName:
        type: string
    required:
    - name
    - owner
    - registrant
    type: object
  utils.ErrorResponse:
    properties:
      message:
        type: string
    type: object
host: jeeg.otto.to.it:3000
info:
  contact:
    email: support@otto.to.it
    name: Otto
    url: https://www.otto.to.it
  description: This is a REST API used to manage Otto systems
  license:
    name: MIT
    url: https://mit-license.org/
  termsOfService: http://swagger.io/terms/
  title: Systems Management API
  version: 0.1.0
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Generates and sends a jwt token given user credentials (email and
        password)
      parameters:
      - description: Email and password
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/auth.LoginCredentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.LoginSuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Login user
      tags:
      - auth
  /auth/user:
    get:
      consumes:
      - application/json
      description: Retrieves all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/auth.UserData'
              type: array
            type: array
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Users list
      tags:
      - auth
    post:
      consumes:
      - application/json
      description: Creates an user
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.UserValidatorData'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/auth.UserData'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create user
      tags:
      - auth
  /auth/user/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - auth
    get:
      consumes:
      - application/json
      description: Retrieves one user given its id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.UserData'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Users detail
      tags:
      - auth
    put:
      consumes:
      - application/json
      description: Updates an user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.UserValidatorData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.UserData'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - auth
  /domain/:
    post:
      consumes:
      - application/json
      description: Creates a domain
      parameters:
      - description: Domain data
        in: body
        name: domain
        required: true
        schema:
          $ref: '#/definitions/domains.DomainValidatorData'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domains.DomainData'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create domain
      tags:
      - domains
  /domain/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a domain
      parameters:
      - description: Domain ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete domain
      tags:
      - domains
    get:
      consumes:
      - application/json
      description: Retrieves one domain given its id
      parameters:
      - description: Domain ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domains.DomainData'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Domain detail
      tags:
      - domains
    put:
      consumes:
      - application/json
      description: Updates a domain
      parameters:
      - description: Domain ID
        in: path
        name: id
        required: true
        type: string
      - description: Domain data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domains.DomainValidatorData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domains.DomainData'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update domain
      tags:
      - domains
  /domains/:
    get:
      consumes:
      - application/json
      description: Retrieves all domains
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/domains.DomainData'
              type: array
            type: array
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Domains list
      tags:
      - domains
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
